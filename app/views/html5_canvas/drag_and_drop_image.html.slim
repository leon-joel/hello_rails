/ HTML5 ガイドブック 2.7 Canvas - ピクセル操作 p.61
doctype html
html
  head
    meta charset="UTF-8"
    title ピクセル操作 サンプル
    scss:
      body {
        font-family: "ヒラギノ角ゴ Pro W3", "Hiragino Kaku Gothic Pro", Meiryo, "メイリオ", "ＭＳ Ｐゴシック", Verdana, Geneva, Arial, Helvetica;
        font-size: 80%;
      }
      #dp {
        width: 200px;
        min-height: 70px;
        border:1px solid #000000;
        background-color: #eeeeee;
        padding:1em;
        margin:2em;

        img {
          margin-right: 1em;
        }
      }

    script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"
    coffee:
      # ドロップ領域のdiv要素
      dp = null
      # FileReaderインタフェースオブジェクト
      reader = null

      # イベントをキャンセルするハンドラです.
      cancelEvent = (evt)->
        evt.preventDefault()
        evt.stopPropagation()
        return false

      ### -------------------------------------------------------------------
        ページがロードされたときの処理
      ###
      $(window).on 'load', ->
        # ドロップ領域のdiv要素
        dp = $("#dp")
        # dragenter/dragoverイベントのイベントリスナーをセット ※CoffeeScriptの関数は()で囲む。
        dp.on "dragenter", cancelEvent
        dp.on "dragover", cancelEvent

        # dropイベントのイベントリスナーをセット
        dp.on "drop", (evt) ->
          evt.preventDefault()
          file_droped(evt)

      ### -------------------------------------------------------------------
        ファイルがドロップされたときの処理
      ###
      file_droped = (evt) ->
        # 表示領域をクリア
        dp.empty()    # jsならwhileループでぐるぐる回しのところ、jQueryならempty()一発

        # ドロップされたファイルのFileインタフェースオブジェクト
        file = evt.originalEvent.dataTransfer.files[0]    #jQuery.EventオブジェクトからoriginalEventで生eventに取り出し
        # FileReaderインタフェースオブジェクト
        reader = new FileReader()
        # 画像ファイルでなければエラー
        if ! /^image/.test(file.type)
          alert("画像ファイルをドロップして下さい。")

        # ドロップ画像をロード
        reader.readAsDataURL(file)
        reader.onload = prepare_image

      ### -------------------------------------------------------------------
        ドロップされたファイルを表示
      ###
      prepare_image = (evt) ->
        # img要素を生成して、ドロップされた画像を表示
        image = $("<img>", {src: reader.result});   # jsなら: document.createElement("img")
        #image.setAttribute("src", reader.result)
        dp.append(image)    # js: appendChild
        # img要素がドキュメントにロードされたら処理を続行
        image.load ->
          # 画像のサイズを取得
          w = parseInt(this.width)    # imageではなく、
          h = parseInt(this.height)
          # canvas要素を生成して、画像を組み込む
          canvas = document.createElement("canvas")
          canvas.width = w
          canvas.height = h
          ctx = canvas.getContext("2d")
          ctx.drawImage(this, 0, 0)
          # canvasのピクセルデータを取得
          imagedata = ctx.getImageData(0, 0, w, h)
          # グレースケールに変換
          convert_image_to_gray_scale(imagedata.data)
          # canvasのピクセルデータを置き換える
          ctx.putImageData(imagedata, 0, 0)
          # canvasを表示
          dp.append(canvas)

      ### -------------------------------------------------------------------
        グレースケールに変換
      ###
      convert_image_to_gray_scale = (data)->
        len = data.length
        pixels = len / 4
        for i in [0..pixels-1]
          # R, G, Bそれぞれのコンポーネント値を取り出す
          r = data[ i*4 ]
          g = data[ i*4 + 1 ]
          b = data[ i*4 + 2 ]
          # グレースケールに変換
          g = parseInt( (11*r + 16*g + 5*b) / 32 )
          # 変換したピクセルデータをセット
          data[ i*4 ] = g
          data[ i*4 + 1 ] = g
          data[ i*4 + 2 ] = g

  body
    = link_to 'Top Page', root_path
    br
    div#dp
      p ここにデスクトップ上のファイルをドロップして下さい。
